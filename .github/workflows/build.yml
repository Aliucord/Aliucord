name: Build

on:
  workflow_dispatch:
  push:
    paths-ignore:
      - "**.md"
  pull_request:
    paths-ignore:
      - "**.md"

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 8
    # Prevent duplicate workflow run for PRs from same repo
    if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork }}
    permissions:
      contents: read
    steps:
      - name: Checkout src
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Setup JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Build project
        run: |
          # Check if this should be marked as a release build
          export RELEASE=${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/main' }}

          chmod +x gradlew
          ./gradlew --stacktrace :Aliucord:make :Injector:make :patches:package :patches:disassembleWithPatches :patches:test

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          if-no-files-found: error
          path: |
            ${{ github.workspace }}/Aliucord/build/outputs/Aliucord.zip
            ${{ github.workspace }}/Injector/build/outputs/Injector.dex
            ${{ github.workspace }}/patches/build/outputs/patches.zip

  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 3
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    needs: [ build ]
    permissions:
      contents: write
    steps:
      - name: Checkout src
        uses: actions/checkout@v4
        with:
          path: src

      - name: Checkout builds
        uses: actions/checkout@v4
        with:
          ref: builds
          path: builds

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build
          path: artifacts

      - name: Deploy builds
        run: |
          # Flatten downloaded artifacts
          find $GITHUB_WORKSPACE/artifacts -type f -exec mv -t $GITHUB_WORKSPACE/artifacts '{}' +

          # Extract component versions
          coreVersion=$(cat $GITHUB_WORKSPACE/src/Aliucord/build.gradle.kts | grep -E 'version = "' | cut -d \" -f 2)
          patchesVersion=$(cat $GITHUB_WORKSPACE/src/patches/build.gradle.kts | grep -E 'version = "' | cut -d \" -f 2)
          injectorVersion=$(cat $GITHUB_WORKSPACE/src/Injector/build.gradle.kts | grep -E 'version = "' | cut -d \" -f 2)

          # Copy over builds if version changed
          cd $GITHUB_WORKSPACE/builds
          [ "$(jq -r '.coreVersion' data.json)" != "$coreVersion" ] && cp $GITHUB_WORKSPACE/artifacts/Aliucord.zip .
          [ "$(jq -r '.injectorVersion' data.json)" != "$injectorVersion" ] && cp $GITHUB_WORKSPACE/artifacts/Injector.dex .
          [ "$(jq -r '.patchesVersion' data.json)" != "$patchesVersion" ] && cp $GITHUB_WORKSPACE/artifacts/patches.zip .

          # Write versions to data.json
          # `aliucordHash` is kept to force old builds to update
          jq '. + { coreVersion: $cv, injectorVersion: $iv, patchesVersion: $pv, aliucordHash: "0000000" }' \
             --arg cv $coreVersion \
             --arg iv $injectorVersion \
             --arg pv $patchesVersion \
             ../src/.assets/data.json > data.json

          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git add .
          if [[ `git status --porcelain` ]]; then
            git commit -m "Build $GITHUB_SHA"
            git push
          fi

      - name: Wait for GitHub Pages
        run: sleep 2m

      # TODO: purge only when content actually changed
      - name: Purge Cloudflare cache
        uses: jakejarvis/cloudflare-purge-action@v0.3.0
        env:
          CLOUDFLARE_ZONE: ${{ secrets.CLOUDFLARE_ZONE }}
          CLOUDFLARE_TOKEN: ${{ secrets.CLOUDFLARE_PURGE_TOKEN }}
          PURGE_URLS: |
            [
              "https://builds.aliucord.com/data.json",
              "https://builds.aliucord.com/Aliucord.zip",
              "https://builds.aliucord.com/Injector.dex",
              "https://builds.aliucord.com/patches.zip"
            ]

  # Publish core to maven if not originating from a PR
  maven:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event_name != 'pull_request' && github.repository_owner == 'Aliucord'
    needs: [ build ]
    permissions:
      contents: read
    steps:
      - name: Checkout src
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Setup JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build & Publish to Maven
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
        run: |
          chmod +x gradlew
          ./gradlew :Aliucord:publish --stacktrace -Pversion=$GITHUB_REF_NAME-SNAPSHOT
          ./gradlew :Aliucord:publish --stacktrace -Pversion=$(git rev-parse --short "$GITHUB_SHA") | exit 0
