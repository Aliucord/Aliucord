plugins {
    id 'com.android.library'
}

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
        ignoreExitValue = true
    }
    return stdout.toString().trim()
}

android {
    compileSdkVersion 30

    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        buildConfigField "String", "GIT_REVISION", "\"${getGitHash()}\""
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures {
        viewBinding true
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'

    api fileTree(include: '*.aar', dir: './libs')
    api project(':DiscordStubs')
}

// https://www.stkent.com/2016/06/10/adventures-with-javadocs-part-3.html
android.libraryVariants.all { variant ->
    if (variant.name == 'release') {
        task javadoc(type: Javadoc) {
            var compiler = variant.javaCompileProvider.get()
            source = compiler.source
            classpath = files(android.bootClasspath.join(File.pathSeparator))
            classpath += compiler.classpath

            exclude 'com/discord/app/**'
        }
    }
}
