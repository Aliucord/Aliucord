plugins {
    id 'com.android.library'
    id 'maven-publish'
    id 'com.aliucord.gradle'
}

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
        ignoreExitValue = true
    }
    return stdout.toString().trim()
}

aliucord {
    projectType = com.aliucord.gradle.ProjectType.CORE
}

android {
    compileSdkVersion 30

    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        buildConfigField "String", "GIT_REVISION", "\"${getGitHash()}\""
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    buildFeatures {
        viewBinding true
    }
}

dependencies {
    discord "com.discord:discord:${project.discord_version}"
    api 'androidx.appcompat:appcompat:1.3.1'
    api 'com.google.android.material:material:1.4.0'
    api 'androidx.constraintlayout:constraintlayout:2.1.0'

    api 'com.github.Aliucord:pine:83f67b2cdb'
}

// https://www.stkent.com/2016/06/10/adventures-with-javadocs-part-3.html
android.libraryVariants.all { variant ->
    if (variant.name == 'release') {
        task javadoc(type: Javadoc) {
            var compiler = variant.javaCompileProvider.get()
            source = compiler.source
            classpath = files(android.bootClasspath.join(File.pathSeparator))
            classpath += compiler.classpath
        }
    }
}

afterEvaluate {
    publishing {
        publications {
            debug(MavenPublication) {
                group = "com.github.Aliucord"

                from components.debug
            }
        }
    }
}

task pushDebuggable {
    group = "aliucord"

    def android = project.extensions.getByName("android")
    def aliucordPath = "/storage/emulated/0/Aliucord/"

    doLast {
        exec {
            commandLine(android.adbExecutable, "shell", "touch", aliucordPath + ".debuggable")
        }

        exec {
            commandLine(android.adbExecutable, "push", rootProject.file(".assets/AndroidManifest-debuggable.xml"), aliucordPath + "AndroidManifest.xml")
        }
    }
}